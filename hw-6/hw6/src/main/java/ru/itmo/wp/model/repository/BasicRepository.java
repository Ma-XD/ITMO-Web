package ru.itmo.wp.model.repository;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Entity;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.*;

public abstract class BasicRepository {
    protected final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    protected Entity findByKey(String key, Object value) {
        return findByKeys(new HashMap<String, Object>(){{
            put(key, value);
        }}, null);
    }

    protected Entity findByKeys(Map<String, Object> keyToValue, String separator) {
        String entityName = DatabaseUtils.getEntityName(this.getClass().getSimpleName());
        List<Entity> entities = findAllByKeys(keyToValue, separator);
        if (entities.size() == 0) {
            return null;
        }
        if (entities.size() > 1) {
            throw new RepositoryException("More than one " + entityName + " found");
        }
        return entities.get(0);
    }

    protected List<Entity> findAllByKeys(Map<String, Object> keyToValue, String separator) {
        String entityName = DatabaseUtils.getEntityName(this.getClass().getSimpleName());
        List<Entity> entities = new ArrayList<>();

        try (Connection connection = DATA_SOURCE.getConnection()) {
            String sql = DatabaseUtils.getSQLSelect(entityName, keyToValue.keySet(), separator);

            try (PreparedStatement statement = connection.prepareStatement(sql + " ORDER BY id DESC")) {
                DatabaseUtils.setStatement(statement, keyToValue.values().toArray());

                try (ResultSet resultSet = statement.executeQuery()) {
                    Entity entity;
                    while ((entity = toEntityImpl(statement.getMetaData(), resultSet)) != null) {
                        entities.add(entity);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + entityName + ".", e);
        }
        return entities;
    }

    protected void saveByKeys(Entity entity, Map<String, Object> keyToValue) {
        String entityName = DatabaseUtils.getEntityName(this.getClass().getSimpleName());
        try (Connection connection = DATA_SOURCE.getConnection()) {
            String sql = DatabaseUtils.getSQLInsert(entityName, keyToValue.keySet());

            try (PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                DatabaseUtils.setStatement(statement, keyToValue.values().toArray());
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + entityName + ".");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        entity.setId(generatedKeys.getLong(1));
                        entity.setCreationTime(findByKey("id", entity.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException("Can't save " + entityName + " [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + entityName + ".", e);
        }
    }

    public int countAll() {
        String entityName = DatabaseUtils.getEntityName(this.getClass().getSimpleName());
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT COUNT(*) FROM " + entityName)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        return resultSet.getInt(1);
                    }
                    return 0;
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + entityName + ".", e);
        }
    }

   protected abstract Entity toEntityImpl(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;
}
